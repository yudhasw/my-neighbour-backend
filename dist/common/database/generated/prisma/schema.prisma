generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
  // directUrl = env("DIRECT_URL")
}

// Enum Types

enum UserRole {
  RESIDENT
  EMPLOYEE
}

enum EmployeeRole {
  ADMIN
  PROPERTY_MANAGER
  TECHNICIAN
  SECURITY
  NONE
}

enum Gender {
  MALE
  FEMALE
  NONE
}

enum ResidentStatus {
  HEAD_HOUSE_HOLD
  FAMILY_MEMBERS
}

enum PostedBy {
  RESIDENT
  EMPLOYEE
}

enum UnitStatus {
  OCCUPIED
  VACANT
  MAINTENANCE
}

enum PaymentStatus {
  PAID
  PENDING
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  E_WALLET
  CREDIT_CARD
  CASH
}

enum MaintenanceCategory {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MaintenanceStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentType {
  CICILAN_KPR
  IURAN_BULANAN
}

enum ContactRole {
  EMPLOYEE
  EMERGENCY_SERVICES
}

enum ComplaintStatus {
  NEW
  VERIFIED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  AWAITING_FAMILY_APPROVAL
}

enum RegistrationMethod {
  ADMIN_DRIVEN
  USER_DRIVEN
}

enum DocumentType {
  AJB
  SHM
  KPR_PROOF
  ID_CARD
  FAMILY_CARD
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// Models

model Users {
  id                     String    @id @default(uuid()) @map("pengguna_id") @db.Uuid
  fullName               String    @map("nama_lengkap")
  firstName              String    @map("nama_depan")
  lastName               String    @map("nama_belakang")
  username               String    @unique @map("username")
  dateOfBirth            DateTime? @map("tanggal_lahir")
  contactNumber          String?   @map("nomor_kontak")
  primaryEmail           String    @unique @map("email_utama")
  secondaryEmail         String?   @unique @map("email_kedua")
  password               String    @map("password_terenkripsi")
  sessionToken           String?   @unique
  emailVerificationToken String?   @unique
  passwordResetToken     String?   @unique
  role                   UserRole
  gender                 Gender?   @default(NONE)
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt              DateTime  @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi balik
  Resident      Residents?
  Employee      Employees?
  ForumPosts    ForumPosts[]
  ForumComments ForumComments[]

  @@map("tb_pengguna")
}

model Residents {
  id                        String             @id @default(uuid()) @map("penghuni_id") @db.Uuid // ID unik untuk Resident
  userId                    String             @unique @map("pengguna_id") @db.Uuid // Foreign key ke Users
  user                      Users              @relation(fields: [userId], references: [id], onDelete: Cascade)
  emergencyContactName      String?            @map("nama_kontak_darurat")
  emergencyContactNumber    String?            @map("nomor_kontak_darurat")
  movedInDate               DateTime           @map("tanggal_masuk") @db.Timestamp()
  movedOutDate              DateTime?          @map("tanggal_keluar") @db.Timestamp()
  familyCode                String?            @map("kode_unik_keluarga")
  residentStatus            ResidentStatus?    @default(FAMILY_MEMBERS)
  unitId                    String?            @map("unit_id") @db.Uuid
  unit                      Units?             @relation(fields: [unitId], references: [id], onDelete: SetNull)
  kprPaymentAmount          Float?             @map("jumlah_cicilan_kpr")
  kprDueDate                DateTime?          @map("tanggal_jatuh_tempo_kpr") @db.Timestamp()
  isKprPaid                 Boolean?           @default(false) @map("kpr_lunas")
  registrationStatus        RegistrationStatus @default(PENDING) @map("status_registrasi")
  registrationMethod        RegistrationMethod @default(USER_DRIVEN) @map("metode_registrasi")
  approvedBy                String?            @map("disetujui_oleh") @db.Uuid
  approvalDate              DateTime?          @map("tanggal_persetujuan") @db.Timestamp()
  rejectionReason           String?            @map("alasan_penolakan")
  pendingApproval           Boolean            @default(false) @map("menunggu_persetujuan")
  approvedByHeadOfHousehold String?            @map("disetujui_kepala_keluarga") @db.Uuid
  createdAt                 DateTime           @default(now()) @map("created_at") @db.Timestamp()
  updatedAt                 DateTime           @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi balik
  Complaints            Complaints[]
  Payments              Payments[]
  ResidentDocuments     ResidentDocuments[]
  FamilyCodes           FamilyCodes[]
  FamilyMemberApprovals FamilyApprovals[]   @relation("FamilyMemberApproval")
  FamilyApprovals       FamilyApprovals[]   @relation("HeadOfHouseholdApproval")

  @@map("tb_penghuni")
}

model FamilyCodes {
  id              String    @id @default(uuid()) @map("kode_keluarga_id") @db.Uuid
  code            String    @unique @map("kode_unik")
  headOfHousehold String    @map("kepala_keluarga_id") @db.Uuid
  headResident    Residents @relation(fields: [headOfHousehold], references: [id], onDelete: Cascade)
  unitId          String?   @map("unit_id") @db.Uuid
  unit            Units?    @relation(fields: [unitId], references: [id], onDelete: SetNull)
  isActive        Boolean   @default(true) @map("aktif")
  maxMembers      Int       @default(10) @map("maksimal_anggota")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp()

  @@map("tb_kode_keluarga")
}

model FamilyApprovals {
  id                String         @id @default(uuid()) @map("persetujuan_id") @db.Uuid
  familyMemberId    String         @map("anggota_keluarga_id") @db.Uuid
  familyMember      Residents      @relation("FamilyMemberApproval", fields: [familyMemberId], references: [id], onDelete: Cascade)
  headOfHouseholdId String         @map("kepala_keluarga_id") @db.Uuid
  headOfHousehold   Residents      @relation("HeadOfHouseholdApproval", fields: [headOfHouseholdId], references: [id], onDelete: Cascade)
  status            ApprovalStatus @default(PENDING) @map("status")
  requestedAt       DateTime       @default(now()) @map("tanggal_permintaan") @db.Timestamp()
  respondedAt       DateTime?      @map("tanggal_respon") @db.Timestamp()
  notes             String?        @map("catatan")

  @@map("tb_persetujuan_keluarga")
}

model ResidentDocuments {
  id           String       @id @default(uuid()) @map("dokumen_id") @db.Uuid
  residentId   String       @map("penghuni_id") @db.Uuid
  resident     Residents    @relation(fields: [residentId], references: [id], onDelete: Cascade)
  documentType DocumentType @map("tipe_dokumen")
  fileName     String       @map("nama_file")
  fileUrl      String       @map("url_file")
  fileSize     Int          @map("ukuran_file")
  uploadedAt   DateTime     @default(now()) @map("tanggal_upload") @db.Timestamp()
  verifiedBy   String?      @map("diverifikasi_oleh") @db.Uuid
  verifiedAt   DateTime?    @map("tanggal_verifikasi") @db.Timestamp()
  isVerified   Boolean      @default(false) @map("terverifikasi")

  @@map("tb_dokumen_penghuni")
}

model Employees {
  id               String       @id @default(uuid()) @map("pegawai_id") @db.Uuid
  userId           String       @unique @map("pengguna_id") @db.Uuid
  user             Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  employeeNumberId String       @unique @map("nomor_pegawai")
  hireDate         DateTime     @map("tanggal_perekrutan") @db.Timestamp()
  employeePosition EmployeeRole @default(NONE) @map("posisi_pegawai")
  workingHours     Int          @map("jam_kerja_pegawai")
  salary           Float        @map("gaji_pegawai")
  bonus            Float?       @map("bonus_pegawai")
  createdAt        DateTime     @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime     @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi balik
  Announcements   Announcements[]
  Complaints      Complaints[]
  Bills           Bills[]
  Payments        Payments[]
  SecurityReports SecurityReports[]

  @@map("tb_pegawai")
}

model Complaints {
  id                String              @id @default(uuid()) @map("keluhan_id") @db.Uuid
  title             String              @map("judul_keluhan")
  description       String              @map("deskripsi_keluhan")
  category          MaintenanceCategory @map("kategori_kerusakan")
  status            ComplaintStatus     @default(NEW) @map("status_keluhan")
  images            String[]            @map("url_gambar")
  submittedAt       DateTime            @default(now()) @map("tanggal_pengajuan") @db.Timestamp()
  resolvedAt        DateTime?           @map("tanggal_penyelesaian") @db.Timestamp()
  resolutionDetails String?             @map("detail_penyelesaian")
  residentId        String              @map("penghuni_id") @db.Uuid
  resident          Residents           @relation(fields: [residentId], references: [id], onDelete: Cascade)
  employeeId        String?             @map("pegawai_id") @db.Uuid // Dihapus @unique
  employee          Employees?          @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  unitId            String?             @map("unit_id") @db.Uuid
  unit              Units?              @relation(fields: [unitId], references: [id], onDelete: SetNull)
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime            @updatedAt @map("updated_at") @db.Timestamp()

  @@map("tb_keluhan_penghuni")
}

model Announcements {
  id          String    @id @default(uuid()) @map("pengumuman_id") @db.Uuid
  title       String    @map("judul")
  content     String    @map("isi_pengumuman")
  attachments String[]  @default([]) @map("lampiran_pengumuman")
  publishDate DateTime  @default(now()) @map("tanggal_publikasi")
  expiryDate  DateTime? @map("tanggal_selesai")
  employeeId  String    @map("pegawai_id") @db.Uuid
  employee    Employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp()

  @@map("tb_pengumuman")
}

model ForumPosts {
  id          String   @id @default(uuid()) @map("forum_post_id") @db.Uuid
  title       String   @map("judul")
  content     String   @map("konten")
  attachments String[] @default([]) @map("lampiran_pengumuman")
  authorRole  UserRole
  userId      String   @map("pengguna_id") @db.Uuid
  user        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  publishedAt DateTime @default(now()) @map("tanggal_publikasi")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi Balik
  tags     PostTags[]
  comments ForumComments[]

  @@map("tb_postingan_forum")
}

model PostTags {
  id        String   @id @default(uuid()) @map("tag_id") @db.Uuid
  tagName   String   @unique @map("nama_tag")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  posts ForumPosts[]

  @@map("tb_tag_postingan")
}

model ForumComments {
  id        String     @id @default(uuid()) @map("komentar_id") @db.Uuid
  content   String     @map("isi_komentar")
  userId    String     @map("penulis_id") @db.Uuid
  user      Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String     @map("post_id") @db.Uuid
  post      ForumPosts @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime   @updatedAt @map("updated_at") @db.Timestamp()

  @@map("tb_komentar_forum")
}

model Units {
  id            String     @id @default(uuid()) @map("unit_id") @db.Uuid
  unitNumber    String     @unique @map("nomor_unit")
  buildingName  String?    @map("nama_unit")
  unitOwnership String[]   @default([]) @map("bukti_kepemilikan_unit")
  floorNumber   Int?       @map("jumlah_lantai")
  numberOfRooms Int?       @map("jumlah_ruangan")
  priceSale     Float      @map("harga_jual")
  squareFootage Int?       @map("ukuran_unit")
  location      String     @map("lokasi_unit")
  status        UnitStatus
  createdAt     DateTime   @default(now()) @map("created_at") @db.Timestamp()
  updatedAt     DateTime   @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi Balik
  Residents   Residents[]
  Payments    Payments[]
  Bills       Bills[]
  Complaints  Complaints[]
  FamilyCodes FamilyCodes[]

  @@map("tb_unit_hunian")
}

model Bills {
  id         String      @id @default(uuid()) @map("tagihan_id") @db.Uuid
  amount     Float       @map("jumlah_tagihan")
  type       PaymentType @map("tipe_pembayaran")
  dueDate    DateTime    @map("batas_waktu_pembayaran") @db.Timestamp()
  isPaid     Boolean     @default(false) @map("sudah_dibayar")
  unitId     String      @map("unit_id") @db.Uuid
  unit       Units       @relation(fields: [unitId], references: [id])
  employeeId String      @map("pegawai_id") @db.Uuid
  employee   Employees   @relation(fields: [employeeId], references: [id])
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamp()
  updatedAt  DateTime    @updatedAt @map("updated_at") @db.Timestamp()

  Payments Payments[]

  @@map("tb_tagihan")
}

model Payments {
  id                    String        @id @default(uuid()) @map("pembayaran_id") @db.Uuid
  amount                Float         @map("jumlah_pembayaran")
  paymentDate           DateTime      @default(now()) @db.Timestamp()
  paymentMethod         PaymentMethod @map("metode_pembayaran")
  status                PaymentStatus @map("status_pembayaran")
  residentId            String        @map("penghuni_id") @db.Uuid
  resident              Residents     @relation(fields: [residentId], references: [id])
  unitId                String?       @map("unit_id") @db.Uuid
  unit                  Units?        @relation(fields: [unitId], references: [id])
  processedByEmployeeId String?       @map("pegawai_id_pemroses") @db.Uuid
  processedBy           Employees?    @relation(fields: [processedByEmployeeId], references: [id])
  billId                String?       @map("tagihan_id") @db.Uuid
  bill                  Bills?        @relation(fields: [billId], references: [id])
  createdAt             DateTime      @default(now()) @map("created_at") @db.Timestamp()
  updatedAt             DateTime      @updatedAt @map("updated_at") @db.Timestamp()

  @@map("tb_pembayaran")
}

model Contacts {
  id          String      @id @default(uuid()) @map("kontak_id") @db.Uuid
  name        String      @map("nama")
  role        ContactRole @map("jabatan") // Misal: 'Security', 'Admin', 'Emergency Services'
  phoneNumber String      @map("nomor_telepon")
  email       String?     @map("email")
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime    @updatedAt @map("updated_at") @db.Timestamp()

  @@map("tb_kontak_penting")
}

model SecurityReports {
  id           String            @id @default(uuid()) @map("laporan_id") @db.Uuid
  title        String            @map("judul")
  description  String            @map("deskripsi")
  location     String            @map("lokasi")
  incidentDate DateTime          @map("tanggal_insiden") @db.Timestamp()
  status       MaintenanceStatus @map("status")
  isPublished  Boolean           @default(false) @map("dipublikasikan")
  employeeId   String            @map("pegawai_id") @db.Uuid
  employee     Employees         @relation(fields: [employeeId], references: [id])
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime          @updatedAt @map("updated_at") @db.Timestamp()

  @@map("tb_laporan_keamanan")
}
