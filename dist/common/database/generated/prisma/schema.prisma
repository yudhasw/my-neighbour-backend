generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

// Enum Types

enum UserRole {
  RESIDENT
  EMPLOYEE
}

enum EmployeeRole {
  ADMIN
  PROPERTY_MANAGER
  TECHNICIAN
  SECURITY
  NONE
}

enum Gender {
  MALE
  FEMALE
  NONE
}

enum ResidentStatus {
  HEAD_HOUSE_HOLD
  FAMILY_MEMBERS
}

enum PostedBy {
  RESIDENT
  EMPLOYEE
}

enum UnitStatus {
  OCCUPIED
  VACANT
  MAINTENANCE
}

enum PaymentStatus {
  PAID
  PENDING
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  E_WALLET
  CREDIT_CARD
  CASH
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MaintenanceStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentType {
  CICILAN_KPR
  IURAN_BULANAN
}

enum ContactRole {
  EMPLOYEE
  EMERGENCY_SERVICES
}

enum ComplaintStatus {
  NEW
  VERIFIED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Models

model Users {
  id                     String    @id @default(uuid()) @map("pengguna_id") @db.Uuid
  fullName               String    @map("nama_lengkap")
  firstName              String    @map("nama_depan")
  lastName               String    @map("nama_belakang")
  username               String    @unique @map("username")
  dateOfBirth            DateTime? @map("tanggal_lahir")
  contactNumber          String?   @map("nomor_kontak")
  primaryEmail           String    @unique @map("email_utama")
  secondaryEmail         String?   @unique @map("email_kedua")
  password               String    @unique @map("password_terenkripsi")
  sessionToken           String?   @unique
  emailVerificationToken String?   @unique
  passwordResetToken     String?   @unique
  role                   UserRole
  gender                 Gender?   @default(NONE)
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt              DateTime  @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi balik
  Resident      Residents[]
  Employee      Employees[]
  ForumPosts    ForumPosts[]
  ForumComments ForumComments[]

  @@map("tb_pengguna")
}

model Residents {
  residentId             String          @id @unique @map("penghuni_id") @db.Uuid
  user                   Users           @relation(fields: [residentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  emergencyContactName   String?         @map("nama_kontak_darurat")
  emergencyContactNumber String?         @map("nomor_kontak_darurat")
  movedInDate            DateTime        @map("tanggal_masuk")
  movedOutDate           DateTime?       @map("tanggal_keluar")
  residentStatus         ResidentStatus? @default(FAMILY_MEMBERS)
  unitId                 String?         @map("unit_id") @db.Uuid
  unit                   Units?          @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt              DateTime        @default(now()) @map("created_at") @db.Timestamp()
  updatedAt              DateTime        @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi balik
  maintenanceRequests MaintenanceRequests[]
  payments            Payments[]
  Leases              Leases[]
  Complaints          Complaints[]

  @@map("tb_penghuni")
}

model Employees {
  employeeId       String       @id @unique @map("pegawai_id") @db.Uuid
  user             Users        @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeeNumberId String       @unique @map("nomor_pegawai")
  hireDate         DateTime     @map("tanggal_perekrutan")
  employeePosition EmployeeRole @default(NONE) @map("posisi_pegawai")
  workingHours     Int          @map("jam_kerja_pegawai")
  salary           Float        @map("gaji_pegawai")
  bonus            Float?       @map("bonus_pegawai")
  createdAt        DateTime     @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime     @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi balik
  Announcements       Announcements[]
  MaintenanceRequests MaintenanceRequests[]
  Payments            Payments[]
  Complaint           Complaints?
  Bills               Bills[]

  @@map("tb_pegawai")
}

model MaintenanceRequests {
  id                   String               @id @default(uuid()) @db.Uuid
  title                String               @map("nama_permintaan")
  description          String               @map("deskripsi_pemintaan")
  requestDate          DateTime             @default(now()) @map("tanggal_permintaan")
  priority             MaintenancePriority? @map("prioritas_permintaan")
  status               MaintenanceStatus    @map("status_permintaan")
  residentId           String               @map("penghuni_id") @db.Uuid
  resident             Residents            @relation(fields: [residentId], references: [residentId])
  unitId               String               @map("unit_id") @db.Uuid
  unit                 Units                @relation(fields: [unitId], references: [id])
  assignedToEmployeeId String?              @map("pegawai_id") @db.Uuid
  assignedTo           Employees?           @relation(fields: [assignedToEmployeeId], references: [employeeId])
  createdAt            DateTime             @default(now()) @map("created_at") @db.Timestamp()
  updatedAt            DateTime             @updatedAt @map("updated_at") @db.Timestamp()

  @@map("tb_permintaan_pemeliharaan")
}

model Complaints {
  id                String              @id @default(uuid()) @map("keluhan_id") @db.Uuid
  title             String              @map("judul_keluhan")
  description       String              @map("deskripsi_keluhan")
  category          MaintenancePriority @map("kategori_kerusakan")
  status            ComplaintStatus     @default(NEW) @map("status_keluhan")
  submittedAt       DateTime            @default(now()) @map("tanggal_pengajuan")
  resolvedAt        DateTime?           @map("tanggal_penyelesaian")
  resolutionDetails String?             @map("detail_penyelesaian")
  residentId        String              @map("penghuni_id") @db.Uuid
  resident          Residents           @relation(fields: [residentId], references: [residentId], onDelete: Cascade, onUpdate: Cascade)
  employeeId        String?             @unique @map("employee") @db.Uuid
  employee          Employees?          @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade, onUpdate: Cascade)
  unitId            String?             @map("unit_id") @db.Uuid
  unit              Units?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  images            String[]            @map("url_gambar")
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime            @updatedAt @map("updated_at") @db.Timestamp()

  @@map("tb_keluhan_penghuni")
}

model Payments {
  id                String        @id @default(uuid()) @map("pembayaran_id") @db.Uuid
  amount            Float         @map("jumlah_pembayaran")
  paymentDate       DateTime      @default(now())
  paymentMethod     PaymentMethod @map("metode_pembayaran")
  status            PaymentStatus @map("status_pembayaran")
  paymentFor        String        @map("tujuan_pembayaram")
  description       String?       @map("deskripsi_pembayaran")
  residentId        String        @map("penghuni_id") @db.Uuid
  resident          Residents     @relation(fields: [residentId], references: [residentId])
  unitId            String?       @map("unit_id") @db.Uuid
  unit              Units?        @relation(fields: [unitId], references: [id])
  leaseId           String?       @map("lease_id") @db.Uuid
  lease             Leases?       @relation(fields: [leaseId], references: [id])
  processedByUserId String?       @map("pegawai_id") @db.Uuid
  processedBy       Employees?    @relation(fields: [processedByUserId], references: [employeeId])
  billId            String        @map("tagihan_id") @db.Uuid
  Bill              Bills         @relation(fields: [billId], references: [id])
  createdAt         DateTime      @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime      @updatedAt @map("updated_at") @db.Timestamp()

  @@map("tb_pembayaran")
}

model Announcements {
  id          String    @id @default(uuid()) @map("pengumuman_id") @db.Uuid
  title       String    @map("judul")
  content     String    @map("isi_pengumuman")
  attachments String[]  @map("lampiran_pengumuman")
  publishDate DateTime  @default(now()) @map("tanggal_publikasi")
  expiryDate  DateTime? @map("tanggal_selesai")
  employeeId  String    @map("pegawai_id") @db.Uuid
  employee    Employees @relation(fields: [employeeId], references: [employeeId])
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp()

  @@map("tb_pengumuman")
}

model ForumPosts {
  id          String   @id @default(uuid()) @map("forum_post_id") @db.Uuid
  title       String   @map("judul")
  content     String   @map("konten")
  attachments String[] @map("lampiran_pengumuman")
  authorRole  UserRole
  userId      String   @map("pengguna_id") @db.Uuid
  user        Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  publishedAt DateTime @default(now()) @map("tanggal_publikasi")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi Balik
  tags     PostTags[]
  comments ForumComments[]

  @@map("tb_postingan_forum")
}

model PostTags {
  id        String   @id @default(uuid()) @map("label_id") @db.Uuid
  tagName   String   @map("nama_label")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  //relasi balik
  ForumPosts ForumPosts[]

  @@map("tb_PostTag")
}

model ForumComments {
  id        String     @id @default(uuid()) @map("forum_comment_id") @db.Uuid
  content   String     @map("isi_komentar")
  userId    String     @map("pengguna_id") @db.Uuid
  user      Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String     @map("id_postingan") @db.Uuid
  post      ForumPosts @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime   @updatedAt @map("updated_at") @db.Timestamp()

  @@map("tb_komentar_forum")
}

model Units {
  id            String     @id @default(uuid()) @map("unit_id") @db.Uuid
  unitNumber    String     @unique @map("nomor_unit")
  buildingName  String?    @map("nama_unit")
  floorNumber   Int?       @map("jumlah_lantai")
  numberOfRooms Int?       @map("jumlah_ruangan")
  squareFootage Int?       @map("ukuran_unit")
  rentAmount    Float?     @map("harga_cicilan")
  location      String     @map("lokasi_unit")
  status        UnitStatus
  priceSale     Float      @map("harga_jual")
  createdAt     DateTime   @default(now()) @map("created_at") @db.Timestamp()
  updatedAt     DateTime   @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi Balik
  Residents           Residents[]
  MaintenanceRequests MaintenanceRequests[]
  Payments            Payments[]
  Leases              Leases[]
  Bills               Bills[]
  Complaints          Complaints[]

  @@map("tb_unit_hunian")
}

model Leases {
  id                 String    @id @default(uuid()) @db.Uuid
  startDate          DateTime  @map("tanggal_mulai")
  endDate            DateTime  @map("tanggal_selesai")
  monthlyRent        Float     @map("sewa_bulanan")
  depositAmount      Float?    @map("jumlah_deposit")
  termsAndConditions String?   @map("syarat_dan_ketentuan")
  residentId         String    @unique @map("penghuni_id") @db.Uuid
  resident           Residents @relation(fields: [residentId], references: [residentId])
  unitId             String    @unique @map("unit_id") @db.Uuid
  unit               Units     @relation(fields: [unitId], references: [id])
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt          DateTime  @updatedAt @map("updated_at") @db.Timestamp()

  // relasi Balik
  Payments Payments[]

  @@map("tb_perjanjian_sewa")
}

model Bills {
  id         String      @id @default(uuid()) @map("tagihan_id") @db.Uuid
  amount     Float       @map("jumlah_tagihan")
  type       PaymentType @map("tipe_pembayaran")
  dueDate    DateTime    @map("batas_waktu_pembayaran")
  isPaid     Boolean     @default(false) @map("sudah_dibayar")
  unitId     String      @map("unit_id") @db.Uuid
  unit       Units       @relation(fields: [unitId], references: [id])
  employeeId String      @map("pegawai_id") @db.Uuid
  employee   Employees   @relation(fields: [employeeId], references: [employeeId])
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamp()
  updatedAt  DateTime    @updatedAt @map("updated_at") @db.Timestamp()

  // Relasi Balik
  Payments Payments[]

  @@map("tb_tagihan")
}

model Contacts {
  id          String      @id @default(uuid()) @map("kontak_id") @db.Uuid
  name        String      @map("nama")
  role        ContactRole @map("jabatan") // Misal: 'Security', 'Admin', 'Emergency Services'
  phoneNumber String      @map("nomor_telepon")
  email       String?     @map("email")
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime    @updatedAt @map("updated_at") @db.Timestamp()

  @@map("tb_kontak_penting")
}
