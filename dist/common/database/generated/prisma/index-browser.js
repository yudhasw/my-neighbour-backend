
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  firstName: 'firstName',
  lastName: 'lastName',
  username: 'username',
  dateOfBirth: 'dateOfBirth',
  contactNumber: 'contactNumber',
  primaryEmail: 'primaryEmail',
  secondaryEmail: 'secondaryEmail',
  password: 'password',
  sessionToken: 'sessionToken',
  emailVerificationToken: 'emailVerificationToken',
  passwordResetToken: 'passwordResetToken',
  role: 'role',
  gender: 'gender',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResidentsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emergencyContactName: 'emergencyContactName',
  emergencyContactNumber: 'emergencyContactNumber',
  movedInDate: 'movedInDate',
  movedOutDate: 'movedOutDate',
  familyCode: 'familyCode',
  residentStatus: 'residentStatus',
  unitId: 'unitId',
  kprPaymentAmount: 'kprPaymentAmount',
  kprDueDate: 'kprDueDate',
  isKprPaid: 'isKprPaid',
  registrationStatus: 'registrationStatus',
  registrationMethod: 'registrationMethod',
  approvedBy: 'approvedBy',
  approvalDate: 'approvalDate',
  rejectionReason: 'rejectionReason',
  pendingApproval: 'pendingApproval',
  approvedByHeadOfHousehold: 'approvedByHeadOfHousehold',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FamilyCodesScalarFieldEnum = {
  id: 'id',
  code: 'code',
  headOfHousehold: 'headOfHousehold',
  unitId: 'unitId',
  isActive: 'isActive',
  maxMembers: 'maxMembers',
  createdAt: 'createdAt'
};

exports.Prisma.FamilyApprovalsScalarFieldEnum = {
  id: 'id',
  familyMemberId: 'familyMemberId',
  headOfHouseholdId: 'headOfHouseholdId',
  status: 'status',
  requestedAt: 'requestedAt',
  respondedAt: 'respondedAt',
  notes: 'notes'
};

exports.Prisma.ResidentDocumentsScalarFieldEnum = {
  id: 'id',
  residentId: 'residentId',
  documentType: 'documentType',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileSize: 'fileSize',
  uploadedAt: 'uploadedAt',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt',
  isVerified: 'isVerified'
};

exports.Prisma.EmployeesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  employeeNumberId: 'employeeNumberId',
  hireDate: 'hireDate',
  employeePosition: 'employeePosition',
  workingHours: 'workingHours',
  salary: 'salary',
  bonus: 'bonus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComplaintsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  status: 'status',
  images: 'images',
  submittedAt: 'submittedAt',
  resolvedAt: 'resolvedAt',
  resolutionDetails: 'resolutionDetails',
  residentId: 'residentId',
  employeeId: 'employeeId',
  unitId: 'unitId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnnouncementsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  attachments: 'attachments',
  publishDate: 'publishDate',
  expiryDate: 'expiryDate',
  employeeId: 'employeeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumPostsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  attachments: 'attachments',
  authorRole: 'authorRole',
  userId: 'userId',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostTagsScalarFieldEnum = {
  id: 'id',
  tagName: 'tagName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumCommentsScalarFieldEnum = {
  id: 'id',
  content: 'content',
  userId: 'userId',
  postId: 'postId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UnitsScalarFieldEnum = {
  id: 'id',
  unitNumber: 'unitNumber',
  buildingName: 'buildingName',
  unitOwnership: 'unitOwnership',
  floorNumber: 'floorNumber',
  numberOfRooms: 'numberOfRooms',
  priceSale: 'priceSale',
  squareFootage: 'squareFootage',
  location: 'location',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillsScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  type: 'type',
  dueDate: 'dueDate',
  isPaid: 'isPaid',
  unitId: 'unitId',
  employeeId: 'employeeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  status: 'status',
  residentId: 'residentId',
  unitId: 'unitId',
  processedByEmployeeId: 'processedByEmployeeId',
  billId: 'billId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  role: 'role',
  phoneNumber: 'phoneNumber',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SecurityReportsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  location: 'location',
  incidentDate: 'incidentDate',
  status: 'status',
  isPublished: 'isPublished',
  employeeId: 'employeeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  RESIDENT: 'RESIDENT',
  EMPLOYEE: 'EMPLOYEE'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  NONE: 'NONE'
};

exports.ResidentStatus = exports.$Enums.ResidentStatus = {
  HEAD_HOUSE_HOLD: 'HEAD_HOUSE_HOLD',
  FAMILY_MEMBERS: 'FAMILY_MEMBERS'
};

exports.RegistrationStatus = exports.$Enums.RegistrationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  AWAITING_FAMILY_APPROVAL: 'AWAITING_FAMILY_APPROVAL'
};

exports.RegistrationMethod = exports.$Enums.RegistrationMethod = {
  ADMIN_DRIVEN: 'ADMIN_DRIVEN',
  USER_DRIVEN: 'USER_DRIVEN'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  AJB: 'AJB',
  SHM: 'SHM',
  KPR_PROOF: 'KPR_PROOF',
  ID_CARD: 'ID_CARD',
  FAMILY_CARD: 'FAMILY_CARD'
};

exports.EmployeeRole = exports.$Enums.EmployeeRole = {
  ADMIN: 'ADMIN',
  PROPERTY_MANAGER: 'PROPERTY_MANAGER',
  TECHNICIAN: 'TECHNICIAN',
  SECURITY: 'SECURITY',
  NONE: 'NONE'
};

exports.MaintenanceCategory = exports.$Enums.MaintenanceCategory = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ComplaintStatus = exports.$Enums.ComplaintStatus = {
  NEW: 'NEW',
  VERIFIED: 'VERIFIED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.UnitStatus = exports.$Enums.UnitStatus = {
  OCCUPIED: 'OCCUPIED',
  VACANT: 'VACANT',
  MAINTENANCE: 'MAINTENANCE'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  CICILAN_KPR: 'CICILAN_KPR',
  IURAN_BULANAN: 'IURAN_BULANAN'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  BANK_TRANSFER: 'BANK_TRANSFER',
  E_WALLET: 'E_WALLET',
  CREDIT_CARD: 'CREDIT_CARD',
  CASH: 'CASH'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PAID: 'PAID',
  PENDING: 'PENDING',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.ContactRole = exports.$Enums.ContactRole = {
  EMPLOYEE: 'EMPLOYEE',
  EMERGENCY_SERVICES: 'EMERGENCY_SERVICES'
};

exports.MaintenanceStatus = exports.$Enums.MaintenanceStatus = {
  NEW: 'NEW',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  Users: 'Users',
  Residents: 'Residents',
  FamilyCodes: 'FamilyCodes',
  FamilyApprovals: 'FamilyApprovals',
  ResidentDocuments: 'ResidentDocuments',
  Employees: 'Employees',
  Complaints: 'Complaints',
  Announcements: 'Announcements',
  ForumPosts: 'ForumPosts',
  PostTags: 'PostTags',
  ForumComments: 'ForumComments',
  Units: 'Units',
  Bills: 'Bills',
  Payments: 'Payments',
  Contacts: 'Contacts',
  SecurityReports: 'SecurityReports'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
